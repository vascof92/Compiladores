/* Generated By:JJTree&JavaCC: Do not edit this line. Cyk.java */
import java.util.HashMap;
import java.lang.Integer;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;

public class Cyk/*@bgen(jjtree)*/implements CykTreeConstants, CykConstants {/*@bgen(jjtree)*/
  protected static JJTCykState jjtree = new JJTCykState();/*Hashmap para armazenar as regras da gramatica. "A->B C" seria um par (A, (B,C))
	static HashMap< String, ArrayList< String >> rules = new HashMap< String, ArrayList< String >>();*/

        //Container para armazenar as regras da gramatica. Primeira string representa o simbolo. A -> B C seria um ArrayList("A","B","C")
    static ArrayList<ArrayList<String> > rules = new ArrayList<ArrayList<String> >();
        static ArrayList< String > value = new ArrayList< String >();
        static String sentence = new String();
        static ArrayList< String > sentenceArray;

        /*static private void printRules() //a ser usado mais para a frente
  	{
        Object[] keys = rules.keySet().toArray();        
        String[] stringArray = Arrays.copyOf(keys, keys.length, String[].class);

        for (int i = 0; i < stringArray.length; i++)
        	System.out.println(stringArray[i]);
  	}*/

        static private boolean isSymbolDefined(String symbol)
        {
                boolean isDefined = false;

                for (int i = 0; i < rules.size(); i++)
                {
                        if (rules.get(i).get(0).equals(symbol))
                        {
                                isDefined = true;
                                break;
                        }
                }

                return isDefined;
        }

        static private boolean checkGrammar()
        {
                ArrayList<String> symbols = new ArrayList<String>();

                //obtem todos os simbolos do lado direito de uma regra
                for (int i = 0; i < rules.size(); i++)
                {
                        for (int j = 1; j < rules.get(i).size(); j++)
                        {
                                if (Character.isUpperCase(rules.get(i).get(j).charAt(0)))
                                {
                                        symbols.add(rules.get(i).get(j));
                                }
                        }
                }

                int defined = 0;

                //verifica se cada simbolo obtido acima esta definido
                for (int i = 0; i < symbols.size(); i++)
                {
                        if (isSymbolDefined(symbols.get(i)))
                                defined++;
                }

                if (defined == symbols.size())
                        return true;
                else
                        return false;
        }

        private static String table[][];

        public static boolean checkCyk()
        {
                sentenceArray = new ArrayList(Arrays.asList(sentence.split(" ")));
                table = new String[sentenceArray.size()][sentenceArray.size()];

                //inicializar tabela
                for (int i = 0; i < sentenceArray.size(); i++)
                        for (int j = 0; j < sentenceArray.size(); j++)
                                table[i][j] = "";

                //primeira linha da tabela
                for (int i = 0; i < sentenceArray.size(); i++) //percorre a frase recebida
        {
            for (int j = 0; j < rules.size(); j++) //para cada palavra ve as regras
            {
                ArrayList<String> rule = new ArrayList<String>();
                                rule = rules.get(j);

                                if (rule.size() == 2) //so se for regra do tipo "A -> terminal" 
                                        if (sentenceArray.get(i).equals(rule.get(1))) //se a palavra da frase recebida for igual a da regra a ser processada
                        table[i][0] = rule.get(0); //adiciona o Simbolo a tabela               
            }
        }

                //Preencher o resto da tabela
                //i - row, j - column
        for (int i = 1; i < sentenceArray.size(); i++)
                        for (int j = 0; j < sentenceArray.size() - i; j++)
                                for (int k = 0; k < i; k++)
                                        for (int r = 0; r < rules.size(); r++)
                                        {
                                                ArrayList<String> rule = new ArrayList<String>();
                                                rule = rules.get(r);

                                                //if P[j,k,B] and P[j+k,i-k,C] then set P[j,i,A] = true

                                                if (rule.size() == 3) // apenas se for uma regra com simbolos nao terminais tipo "A -> B C"
                                                {
                                                        if (!table[j][k].equals("") && !table[j+k+1][i-k-1].equals(""))
                                                        {
                                                                if (table[j][k].equals(rule.get(1)) && table[j+k+1][i-k-1].equals(rule.get(2)))
                                                                {
                                                                        table[j][i] = rule.get(0);
                                                                }
                                                        }
                                                }
                                        }

                System.out.println("CYK Table:\u005cn");
                for (int i = 0; i < sentenceArray.size(); i++)
                {
                        for (int j = 0; j < sentenceArray.size(); j++)
                        {
                                System.out.print(table[j][i]+" ");
                        }
                                System.out.println("");
                }

                if (table[0][sentenceArray.size()-1].equals("")) //se a posicao mais alta da tabela estiver vazia
                        System.out.println("\u005cnThis sentence isn't a member of the grammar.");
                else
                        System.out.println("\u005cnThis sentence is a member of the grammar.");

                return true;
        }

    public static void main(String args[]) throws ParseException {
        System.out.println("\u005cnInput context-free-grammar in CNF: ");

        Cyk cyk = new Cyk(System.in);
        SimpleNode root = cyk.Program();

        // dump tree
        System.out.println("Abstract Syntax Tree:\u005cn");
        root.dump("");

                if (checkGrammar())
                {
                        System.out.println("---------------\u005cnValid Grammar\u005cn---------------");
                        checkCyk();
                }
                else

                        System.out.println("Invalid Grammar");
        // create the symbol table
        //cky.createSymbolTable(root);

        // execute the interpreter
        /*int value = myCalc.eval(root);

        System.out.println("Resultant value: "+value);
        */
    }

/*
Assignment := (Symbol "->" Value ";")+
Value := Symbol Symbol;
Value := Word;
*/
  static final public SimpleNode Program() throws ParseException {
                       /*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        Assignment();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      Sentence();
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Assignment() throws ParseException {
          SimpleNode jjtn001 = new SimpleNode(JJTSYMBOL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      Symbol();
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
    }
    jj_consume_token(8);
                              SimpleNode jjtn002 = new SimpleNode(JJTVALUE);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
    try {
      Value();
    } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte002;}
                              }
                              if (jjte002 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte002;}
                              }
                              {if (true) throw (Error)jjte002;}
    } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
    }
    jj_consume_token(9);
  }

  static final public void Symbol() throws ParseException {
                       Token t;
    SimpleNode jjtn001 = new SimpleNode(JJTSYMBOL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(SYMBOL);
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
                value = new ArrayList<String>();
                //symbol = new String(t.image);
                value.add(new String(t.image));
                jjtn001.symbol= new String(t.image);
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  static final public void Value() throws ParseException {
                      Token t;
          SimpleNode jjtn001 = new SimpleNode(JJTVALUE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORD:
        t = jj_consume_token(WORD);
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                  value.add(new String(t.image));
                  jjtn001.value= new String(t.image);
        break;
      case SYMBOL:
        t = jj_consume_token(SYMBOL);
                  value.add(new String(t.image));
                  jjtn001.value= new String(t.image);
        t = jj_consume_token(SYMBOL);
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtc001 = false;
                  value.add(new String(t.image));
                  jjtn001.value= new String(t.image);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
    }
                rules.add(value);
                //System.out.print("adicionado");

  }

  static final public void Sentence() throws ParseException {
                         Token t;
    SimpleNode jjtn001 = new SimpleNode(JJTSENTENCE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(SENTENCE);
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        sentence = (new String(t.image));
        jjtn001.sentence = new String(t.image);
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CykTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0xa0,};
   }

  /** Constructor with InputStream. */
  public Cyk(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Cyk(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CykTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Cyk(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CykTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Cyk(CykTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CykTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[10];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 10; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
