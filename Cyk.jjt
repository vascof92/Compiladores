options
{
    LOOKAHEAD=1;
    FORCE_LA_CHECK=true;
}

PARSER_BEGIN(Cyk)

import java.util.HashMap;
import java.lang.Integer;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;

public class Cyk
{
  	/*Hashmap para armazenar as regras da gramatica. "A->B C" seria um par (A, (B,C))
	static HashMap< String, ArrayList< String >> rules = new HashMap< String, ArrayList< String >>();*/

	//Container para armazenar as regras da gramatica. Primeira string representa o simbolo. A -> B C seria um ArrayList("A","B","C")
    static ArrayList<ArrayList<String> > rules = new ArrayList<ArrayList<String> >();
  	static ArrayList< String > value = new ArrayList< String >();
  	static String sentence = new String();
  	static ArrayList< String > sentenceArray;

  	/*static private void printRules() //a ser usado mais para a frente
  	{
        Object[] keys = rules.keySet().toArray();        
        String[] stringArray = Arrays.copyOf(keys, keys.length, String[].class);

        for (int i = 0; i < stringArray.length; i++)
        	System.out.println(stringArray[i]);
  	}*/

	static private boolean isSymbolDefined(String symbol)
	{
		boolean isDefined = false;
		
		for (int i = 0; i < rules.size(); i++)
		{
			if (rules.get(i).get(0).equals(symbol))
			{
				isDefined = true;
				break;
			}
		}
		
		return isDefined;
	}
	
	static private boolean checkGrammar()
	{
		ArrayList<String> symbols = new ArrayList<String>();
		
		//obtem todos os simbolos do lado direito de uma regra
		for (int i = 0; i < rules.size(); i++)
		{
			for (int j = 1; j < rules.get(i).size(); j++)
			{
				if (Character.isUpperCase(rules.get(i).get(j).charAt(0)))
				{
					symbols.add(rules.get(i).get(j));
				}
			}
		}
	
		int defined = 0;

		//verifica se cada simbolo obtido acima esta definido
		for (int i = 0; i < symbols.size(); i++)
		{
			if (isSymbolDefined(symbols.get(i)))
				defined++;
		}
		
		if (defined == symbols.size())
			return true;
		else 
			return false;
	}

  	private static String table[][];
  
	public static boolean checkCyk()
	{	 	
		sentenceArray = new ArrayList(Arrays.asList(sentence.split(" ")));
		table = new String[sentenceArray.size()][sentenceArray.size()];
		
	 	//inicializar tabela
		for (int i = 0; i < sentenceArray.size(); i++)
			for (int j = 0; j < sentenceArray.size(); j++)
				table[i][j] = "";

		//primeira linha da tabela
		for (int i = 0; i < sentenceArray.size(); i++) //percorre a frase recebida
        {
            for (int j = 0; j < rules.size(); j++) //para cada palavra ve as regras
            {
                ArrayList<String> rule = new ArrayList<String>();
				rule = rules.get(j);

				if (rule.size() == 2) //so se for regra do tipo "A -> terminal" 
					if (sentenceArray.get(i).equals(rule.get(1))) //se a palavra da frase recebida for igual a da regra a ser processada
                    	table[i][0] = rule.get(0); //adiciona o Simbolo a tabela               
            }
        }

		//Preencher o resto da tabela
		//i - row, j - column
        for (int i = 1; i < sentenceArray.size(); i++)
			for (int j = 0; j < sentenceArray.size() - i; j++)
				for (int k = 0; k < i; k++)					for (int r = 0; r < rules.size(); r++)
					{						ArrayList<String> rule = new ArrayList<String>();
						rule = rules.get(r);
					
						//if P[j,k,B] and P[j+k,i-k,C] then set P[j,i,A] = true
					
						if (rule.size() == 3) // apenas se for uma regra com simbolos nao terminais tipo "A -> B C"
						{
							if (!table[j][k].equals("") && !table[j+k+1][i-k-1].equals("")) 
							{								
								if (table[j][k].equals(rule.get(1)) && table[j+k+1][i-k-1].equals(rule.get(2)))									
								{									table[j][i] = rule.get(0);
								}
							}
						}  
					}

		System.out.println("CYK Table:\n");
		for (int i = 0; i < sentenceArray.size(); i++)
		{
			for (int j = 0; j < sentenceArray.size(); j++)
			{				System.out.print(table[j][i]+" ");
			}
				System.out.println("");
		}

		if (table[0][sentenceArray.size()-1].equals("")) //se a posicao mais alta da tabela estiver vazia
			System.out.println("\nThis sentence isn't a member of the grammar.");
		else
			System.out.println("\nThis sentence is a member of the grammar.");
			 
		return true;	  
	}
	
    public static void main(String args[]) throws ParseException {
        System.out.println("\nInput context-free-grammar in CNF: ");

        Cyk cyk = new Cyk(System.in);
        SimpleNode root = cyk.Program();
		
        // dump tree
        System.out.println("Abstract Syntax Tree:\n");
        root.dump("");
				
		if (checkGrammar())
		{
		 	System.out.println("---------------\nValid Grammar\n---------------");
			checkCyk();
		}
		else
			System.out.println("Invalid Grammar");

        // create the symbol table
        //cky.createSymbolTable(root);

        // execute the interpreter
        /*int value = myCalc.eval(root);

        System.out.println("Resultant value: "+value);
        */
    }
}


PARSER_END(Cyk)

SKIP :
{
	" " | "\n" | "\r" | "\t"
}

TOKEN:
{
	
	 < WORD: (["a"-"z"])+ >
	| < SENTENCE: (< WORD > (" ")?)+ >  
	| < SYMBOL: (["A"-"Z"])+ >
}

/*
Assignment := (Symbol "->" Value ";")+
Value := Symbol Symbol;
Value := Word;
*/

SimpleNode Program(): {}
{
  (Assignment())+ Sentence()
   {return jjtThis;}
}

void Assignment():{}
{	Symbol()"->"Value()";"
}

void Symbol() : {Token t;}
{
	t=<SYMBOL> 
	{
		value = new ArrayList<String>();
		//symbol = new String(t.image);
		value.add(new String(t.image));
	}	
}
void Value() : {Token t;} // "A - > B C;" ou "C - > valor;"
{	(
		t=<WORD>  #Word {value.add(new String(t.image));}
		| 		  
		t=<SYMBOL> #Symbol {value.add(new String(t.image));}
		t=<SYMBOL> #Symbol {value.add(new String(t.image));} 		 		
	)
	{		rules.add(value);
		//System.out.print("adicionado");
	}
}

void Sentence() : {Token t;}
{
	t=< SENTENCE >
	{
    	sentence = (new String(t.image));
	}
}